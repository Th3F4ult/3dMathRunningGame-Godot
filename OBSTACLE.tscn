[gd_scene load_steps=5 format=3 uid="uid://cucnh8qh6tglg"]

[ext_resource type="Texture2D" uid="uid://bjpxmysh25nw1" path="res://1st.png" id="1_q7c52"]
[ext_resource type="Texture2D" uid="uid://btjeqhquhm5ms" path="res://2nd.png" id="2_vks1f"]

[sub_resource type="GDScript" id="GDScript_xaul4"]
script/source = "extends Node3D
# This file generates the actual panels.
var HasEntered = false # This makes it so only 1 of the panels can be touched.
var value1; var value2 # Values we are going to generate or get by force.
@export var forcevalue1 : int; @export var forcevalue2 : int # Variables that can be changed externally to force those values in the panels. This is used to guarantee, for example, that the first panels will ALWAYS have +50/+50.


func _ready():
	value1 = RandomNumberGenerator.new().randi_range(-50,50) # First we generate values for the right and the left.
	value2 = RandomNumberGenerator.new().randi_range(-50,50) # ^^^^^^^^^^^^^^^^^^^^
	if forcevalue1 or forcevalue2:  # If we have any forced values...
		value1 = forcevalue1 # We set them
		value2 = forcevalue2 # And stop with the RNG stuff.
		if value1 >= 0:
			$Area3D/Sprite3D.texture = load(\"res://good.png\")
		else:
			$Area3D/Sprite3D.texture= load(\"res://bad.png\")
		if value2 >= 0:
			$Area3D2/Sprite3D.texture = load(\"res://good.png\")
		else:
			$Area3D2/Sprite3D.texture= load(\"res://bad.png\") # This chunk choses the right color (Red or green) whenever it's more than -1 points or less than -1 points (0 points is positive in this case)
	else:
		$Area3D/Label3D.text = str(value1) # We set the labels in front of the panels
		$Area3D/Label3D2.text = str(value2)
		if value1 >= 0: $Area3D/Sprite3D.texture = load(\"res://good.png\")
		else: $Area3D/Sprite3D.texture= load(\"res://bad.png\")
		if value2 >= 0: $Area3D2/Sprite3D.texture = load(\"res://good.png\")
		else: $Area3D2/Sprite3D.texture= load(\"res://bad.png\") # Same as before, this could be a independent function. and save us space.
		var RNG = RandomNumberGenerator.new().randi_range(1,10) # Roll a dice between 1 and 10...
		match RNG:
			3: # If it's 3, make the left panel a mistery, which can be anything from -100 to +100
				$Area3D/Label3D.text = str(\"???\")
				$Area3D/Sprite3D.texture= load(\"res://mistery.png\")
				value1 = RandomNumberGenerator.new().randi_range(-100,100)
			4: # If it's 4 do the same, but for the right
				$Area3D2/Sprite3D.texture = load(\"res://mistery.png\")
				$Area3D/Label3D2.text = str(\"???\")
				value2 = RandomNumberGenerator.new().randi_range(-100,100)
			#8: # If it's 8, we add a multiplication panel, this can only spawn in the right... For now, will fix... Soon...
				#var rngside = RandomNumberGenerator.new().randi_range(1,2)
				#match rngside:
					#1: value2 = \"*2\"; $Area3D/Label3D2.text = str(\"*2\"); $Area3D2/Sprite3D.texture = load(\"res://multiplication.png\")
					#2: value1 = \"*2\"; $Area3D/Label3D.text = str(\"*2\"); $Area3D/Sprite3D.texture = load(\"res://multiplication.png\")
#This was removed, it was too game breaking.
			10: # And if it's 10 we add a division panel on the left, for now.
				var rngside = RandomNumberGenerator.new().randi_range(1,2)
				match rngside:
					1: value2 = \"/2\"; $Area3D/Label3D2.text = str(\"/2\"); $Area3D2/Sprite3D.texture = load(\"res://divison.png\")
					2: value1 = \"/2\"; $Area3D/Label3D.text = str(\"/2\"); $Area3D/Sprite3D.texture = load(\"res://divison.png\")

func _process(delta):
	if $\"../CharacterBody3D\".level <= -1:
		queue_free() # If the player is dead we don't need to exist.

func _on_area_3d_body_entered(body): # RIGHT PANEL LOGIC!!
	if body.is_in_group(\"player\") and not HasEntered: 
		HasEntered = true # Prevent the player from entering the area again OR going in the other area.
		match value1:
			#\"*2\": $\"../CharacterBody3D\".level *= 2
			\"/2\":$\"../CharacterBody3D\".level -= $\"../CharacterBody3D\".level/2
			_: $\"../CharacterBody3D\".level += value1
			 # We divide it by 2.
			 # Or simply add the normal number if it's not
		self.queue_free() # Delete after player touches.

func _on_area_3d_2_body_entered(body): # LEFT PANEL LOGIC!!
	if body.is_in_group(\"player\") and not HasEntered:
		HasEntered = true
		match value2:
			#\"*2\": $\"../CharacterBody3D\".level *= 2; print(\"Multiplied by two\")
			\"/2\":$\"../CharacterBody3D\".level -= $\"../CharacterBody3D\".level/2
			_: $\"../CharacterBody3D\".level += value2
		self.queue_free()
"

[sub_resource type="BoxShape3D" id="BoxShape3D_kp3i6"]
size = Vector3(2.5, 3, 0.1)

[node name="Node3D" type="Node3D"]
script = SubResource("GDScript_xaul4")

[node name="Area3D" type="Area3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -1.21, 1.5, 0)

[node name="Sprite3D" type="Sprite3D" parent="Area3D"]
transform = Transform3D(0.8, 0, 0, 0, 0.8, 0, 0, 0, 0.8, 0, 0, 0)
texture = ExtResource("1_q7c52")

[node name="CollisionShape3D" type="CollisionShape3D" parent="Area3D"]
shape = SubResource("BoxShape3D_kp3i6")

[node name="Label3D" type="Label3D" parent="Area3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0.698821)
modulate = Color(0, 0, 0, 1)
outline_modulate = Color(1, 1, 1, 1)
text = "+50"
font_size = 128

[node name="Label3D2" type="Label3D" parent="Area3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 2.12247, 0, 0.698821)
modulate = Color(0, 0, 0, 1)
outline_modulate = Color(1, 1, 1, 1)
text = "-50"
font_size = 128

[node name="Area3D2" type="Area3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 1.265, 1.5, 0)

[node name="Sprite3D" type="Sprite3D" parent="Area3D2"]
transform = Transform3D(0.8, 0, 0, 0, 0.8, 0, 0, 0, 0.8, 0, 0, 0)
texture = ExtResource("2_vks1f")

[node name="CollisionShape3D" type="CollisionShape3D" parent="Area3D2"]
shape = SubResource("BoxShape3D_kp3i6")

[connection signal="body_entered" from="Area3D" to="." method="_on_area_3d_body_entered"]
[connection signal="body_entered" from="Area3D2" to="." method="_on_area_3d_2_body_entered"]
